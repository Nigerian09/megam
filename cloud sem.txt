cloud sem:

1. Step-by-Step Tutorial: EC2 Virtual Lab with Custom VPC


Step 1: Sign Into AWS Management Console
Open Browser:
Navigate to aws.amazon.com, click Sign In to the Console (top right).
Log In:
Enter your AWS email and password. New user? Sign up first.
Console Home:
You’ll see the AWS Management Console with a dark blue header and a region dropdown (e.g., “US East (N. Virginia) us-east-1”). Pick a region close to you (I’ll use us-east-1).
Visual Cue: The header says “AWS Management Console,” and services are listed in a grid below.

Step 2: Create a Custom VPC
We’ll build a Virtual Private Cloud (VPC) to isolate our lab network.

Search for VPC:
In the top search bar, type VPC and select VPC.
Create VPC:
On the VPC dashboard, click the orange Create VPC button (top right).
Configure VPC:
Choose VPC only (under “Resources to create”).
Name tag: LabVPC.
IPv4 CIDR block: 10.0.0.0/16 (gives us 65,536 IP addresses).
Leave IPv6 unchecked, tenancy as “Default.”
Click Create VPC.
Confirm:
You’ll see a green “VPC successfully created” message. Click Close.
Visual Cue: The “Create VPC” form has fields like “Name tag” and “IPv4 CIDR block” with a blue “Create VPC” button at the bottom.

Step 3: Create a Subnet
Instances need a subnet within the VPC.

Go to Subnets:
In the VPC dashboard, click Subnets (left sidebar).
Create Subnet:
Click Create subnet (orange button, top right).
Configure Subnet:
VPC ID: Select LabVPC (e.g., vpc-xxxxxxxx | LabVPC).
Subnet name: LabSubnet.
Availability Zone: Choose us-east-1a (or any AZ in your region).
IPv4 CIDR block: 10.0.1.0/24 (256 IPs, a subset of the VPC’s range).
Click Create subnet.
Confirm:
See “Subnet created successfully,” then click Close.
Visual Cue: The “Create subnet” page shows a dropdown for VPC and a table to add subnet details.

Step 4: Set Up Internet Access
Our subnet needs an Internet Gateway and routing to be public.

Create Internet Gateway:
Go to Internet Gateways (left sidebar).
Click Create internet gateway (orange button).
Name tag: LabIGW.
Click Create internet gateway, then Close.
Attach to VPC:
Select LabIGW in the list, click Actions > Attach to VPC.
Choose LabVPC, click Attach internet gateway.
Create a Route Table:
Go to Route Tables (left sidebar).
Click Create route table (orange button).
Name tag: LabRouteTable.
VPC: Select LabVPC.
Click Create route table, then Close.
Add Route to Internet:
Select LabRouteTable in the list.
Click the Routes tab (bottom panel), then Edit routes.
Click Add route.
Destination: 0.0.0.0/0 (all traffic).
Target: Select Internet Gateway, then LabIGW.
Click Save changes.
Associate with Subnet:
With LabRouteTable selected, click the Subnet Associations tab.
Click Edit subnet associations.
Check LabSubnet (e.g., subnet-xxxxxxxx | 10.0.1.0/24), click Save associations.
Visual Cue: The “Routes” tab shows a table with “Destination” and “Target” columns. “Subnet Associations” has a checkbox list.

Step 5: Launch an EC2 Instance
Now, let’s create an instance in our custom network.

Search for EC2:
In the console search bar, type EC2, select EC2.
Launch Instance:
On the EC2 dashboard, click Launch Instance (orange button).
Step 5.1: Choose an AMI
Select Ubuntu:
Scroll or search for Ubuntu Server 20.04 LTS (HVM) (or 22.04 if available).
Click Select.
Visual Cue: AMIs are in a grid with names and blue “Select” buttons.
Step 5.2: Choose Instance Type
Pick t2.micro:
Select t2.micro (Free Tier eligible).
Click Next: Configure Instance Details.
Step 5.3: Configure Instance Details
Set Network:
Number of instances: 1.
Network: Select LabVPC (e.g., vpc-xxxxxxxx | 10.0.0.0/16).
Subnet: Select LabSubnet (e.g., subnet-xxxxxxxx | 10.0.1.0/24).
Auto-assign Public IP: Enable (dropdown to “Enable”).
Next:
Click Next: Add Storage.
Step 5.4: Add Storage
Default Storage:
Keep 8 GiB (gp2 SSD). Increase to 10-20 GiB if needed.
Click Next: Add Tags.
Step 5.5: Add Tags
Tag It:
Click Add Tag.
Key: Name, Value: LabInstance1.
Click Next: Configure Security Group.
Step 5.6: Configure Security Group
New Group:
Select Create a new security group.
Name: LabSG.
Description: Lab access.
Rule: Type: SSH, Port: 22, Source: 0.0.0.0/0 (Anywhere-IPv4, tighten later).
Click Review and Launch.
Step 5.7: Review and Launch
Review:
Confirm settings (e.g., VPC: LabVPC, Subnet: LabSubnet).
Launch:
Click Launch.
Key Pair:
Choose Create a new key pair, name it lab-key, click Download Key Pair (lab-key.pem).
Click Launch Instances.
Visual Cue: The “Review” page lists all choices. The key pair pop-up has a green “Download” button.

Step 6: Connect to Your Instance
View Instances:
Click View Instances. Find LabInstance1 in the list.
Wait for Running:
Check “Status Checks” until it says “2/2 checks passed” (1-2 minutes).
Note the Public IPv4 address (e.g., 54.123.45.67).
SSH In:
In a terminal:
bash

Collapse

Wrap

Copy
chmod 400 lab-key.pem
ssh -i lab-key.pem ubuntu@<public-ip>
Type yes if prompted.
Success:
You’ll see Welcome to Ubuntu 20.04 LTS.
Visual Cue: The Instances table has “Public IPv4” and “Status Checks” columns.

Step 7: Customize the Environment
Update:
Run:
bash

Collapse

Wrap

Copy
sudo apt update && sudo apt upgrade -y
Install Tools:
Example:
bash

Collapse

Wrap

Copy
sudo apt install python3 python3-pip nano -y
Step 8: Create an AMI for Scaling
Create Image:
In EC2, select LabInstance1 > Actions > Image and Templates > Create Image.
Name: LabAMI, Description: Lab base image.
Click Create Image.
Wait:
Go to AMIs (left sidebar). Wait for “Available” status.
Step 9: Launch More Instances
Launch from AMI:
Go to AMIs, select LabAMI, click Launch Instance from AMI.
Repeat Steps 5.2-5.7, setting “Number of instances” to, e.g., 5.
Note IPs:
Each instance gets a public IP.
Step 10: Share Access
Distribute:
Share lab-key.pem and IPs securely with users.
User Login:
Users run: ssh -i lab-key.pem ubuntu@<their-ip>.
Recap of What You Built
VPC: LabVPC (10.0.0.0/16).
Subnet: LabSubnet (10.0.1.0/24).
Internet Gateway: LabIGW.
Route Table: LabRouteTable.
Instance: LabInstance1 (and more from AMI).
Visual Cue: In the VPC dashboard, “Your VPCs” lists LabVPC with associated resources linked.


2. Python docker:
cd pemfile address
ssh -i pemfile ubuntu@ip
yes
sudo -i
apt update
apt install docker.io -y
mkdir python-docker-app
cd python-docker-app
nano hello_world.py
  -- commands
  #!/usr/bin/env python3
print("Hello world")
// Save: Ctrl+O, Enter, Ctrl+X.

python3 hello_world.py
vi dockerfile
  -- commands
  FROM python:3.8-slim
WORKDIR /app
COPY hello_world.py .
RUN chmod +x hello_world.py
CMD ["./hello_world.py"]
docker build -t helloworld.app .
docker run -it helloworld.app


3. static website using docker and ec2:

- Launch an ubuntu machine in EC2 with your key.
- Open command prompt [use putty if you face issues].
1. cd <pemfile location>
2. ssh -i <your pemfile with .pem> ubuntu@<EC2's public IPv4 address>
3. yes
4. sudo -i
5. apt update
6. apt install docker.io -y
- https://www.free-css.com/ la copy any website download link
7. wget <paste link>
8. ls [to view files]
9. apt install unzip
10. unzip <website file name>
11. cd <filename>
12. vi dockerfile
    press i
            FROM nginx:latest
            RUN rm -rf /usr/share/nginx/html
            COPY . /usr/share/nginx/html/
            RUN service nginx restart
    press double esc
    type ":wq!"
13. docker ps
14. docker images
15. docker build -t nginx:myapp .
- go to your security group << edit inbound rules << add a CUSTOM TCP with your preferred port and select "anywhere-IPv4" and save rules.
16. docker run -d -p <your port>:80 nginx:myapp
17. docker ps (check your docker name)
18. docker exec -it <your docker name> /bin/bash
- copy your IPv4 address << ctrl + t << search <your address>:<your port>


[might be similiar to second one]
4. Creating a Python "Hello World" App Inside Docker on EC2
Step 1: Launch a Basic EC2 Instance
1.1 Sign Into AWS Management Console
Open Browser: Go to aws.amazon.com, click Sign In to the Console (top right).
Log In: Enter your AWS credentials.
Select Region: Pick a region (e.g., us-east-1) from the top-right dropdown.
Visual Cue: Dark blue header with “AWS Management Console” and a region selector.

1.2 Launch the EC2 Instance
Search for EC2:
Type EC2 in the top search bar, select EC2.
Start Launch Wizard:
Click Launch Instance (orange button, top right).
Configure Instance:
Name: DockerPythonInstance.
AMI: Scroll to Ubuntu Server 20.04 LTS (HVM) (or 22.04 if available), click Select.
Instance Type: Choose t2.micro (Free Tier eligible), click Next: Configure Instance Details.
Instance Details: Leave defaults (uses default VPC and subnet), ensure Auto-assign Public IP is “Enable”, click Next: Add Storage.
Storage: Keep default 8 GiB gp2 volume, click Next: Add Tags.
Tags: Click Add Tag, Key: Name, Value: DockerPythonInstance, click Next: Configure Security Group.
Security Group:
Select Create a new security group.
Name: DockerSG.
Add rule: Type SSH, Port 22, Source Anywhere-IPv4 (0.0.0.0/0) for simplicity (tighten later if needed).
Click Review and Launch.
Review: Click Launch.
Key Pair:
Choose Create a new key pair, name it docker-key, click Download Key Pair (docker-key.pem).
Click Launch Instances, then View Instances.
Get Public IP:
Wait for “Status Checks” to show “2/2 checks passed” (1-2 minutes).
Note the Public IPv4 address (e.g., 54.123.45.67) from the Instances list.
Visual Cue: EC2 Instances table shows your instance with a green status dot.

Step 2: Connect to the EC2 Instance and Install Docker
2.1 SSH into the Instance
Move Key File:
On your local machine, move docker-key.pem to a secure folder (e.g., ~/aws-keys).
Set permissions:
bash

Collapse

Wrap

Copy
chmod 400 ~/aws-keys/docker-key.pem
Connect:
Run:
bash

Collapse

Wrap

Copy
ssh -i ~/aws-keys/docker-key.pem ubuntu@<public-ip>
Example: ssh -i ~/aws-keys/docker-key.pem ubuntu@54.123.45.67.
Type yes if prompted about the host key.
Confirm:
You’ll see Welcome to Ubuntu 20.04 LTS, prompt: ubuntu@ip-172-31-xx-xx:~$.
Visual Cue: Terminal prompt changes to the instance’s internal IP.

2.2 Install Docker
Update Packages:
Run:
bash

Collapse

Wrap

Copy
sudo apt update
Install Docker:
Install:
bash

Collapse

Wrap

Copy
sudo apt install docker.io -y
Start Docker:
Enable and start:
bash

Collapse

Wrap

Copy
sudo systemctl start docker
sudo systemctl enable docker
Verify:
Check version:
bash

Collapse

Wrap

Copy
docker --version
Output: e.g., Docker version 20.10.7.
Test:
bash

Collapse

Wrap

Copy
docker run hello-world
Should print “Hello from Docker!”.
Avoid sudo (Optional):
Add ubuntu to Docker group:
bash

Collapse

Wrap

Copy
sudo usermod -aG docker ubuntu
Log out (exit) and SSH back in for it to take effect.
Visual Cue: docker run hello-world downloads an image and prints a success message.

Step 3: Create the Python "Hello World" App
3.1 Set Up a Working Directory
Create Directory:
Run:
bash

Collapse

Wrap

Copy
mkdir python-docker-app
cd python-docker-app
Confirm Location:
Run:
bash

Collapse

Wrap

Copy
pwd
Output: /home/ubuntu/python-docker-app.
3.2 Write the Python Script
Create File:
Run:
bash

Collapse

Wrap

Copy
nano hello_world.py
Add Code:
Paste:
python

Collapse

Wrap

Copy
#!/usr/bin/env python3
print("Hello world")
Save: Ctrl+O, Enter, Ctrl+X.
Make Executable:
Run:
bash

Collapse

Wrap

Copy
chmod +x hello_world.py
Test It:
Run:
bash

Collapse

Wrap

Copy
./hello_world.py
Output: Hello world.
Visual Cue: nano opens a blank editor; running the script prints “Hello world” in the terminal.

Step 4: Create a Docker Image for the App
4.1 Write the Dockerfile
Create Dockerfile:
In /home/ubuntu/python-docker-app, run:
bash

Collapse

Wrap

Copy
nano Dockerfile
Add Content:
Paste:
dockerfile

Collapse

Wrap

Copy
FROM python:3.8-slim
WORKDIR /app
COPY hello_world.py .
RUN chmod +x hello_world.py
CMD ["./hello_world.py"]
Save: Ctrl+O, Enter, Ctrl+X.
Visual Cue: ls now shows Dockerfile  hello_world.py.

4.2 Build the Docker Image
Build It:
Run:
bash

Collapse

Wrap

Copy
docker build -t helloworld.app .
-t helloworld.app: Names the image.
.: Uses the current directory.
Expected Output:
text

Collapse

Wrap

Copy
Sending build context to Docker daemon  3.072kB
Step 1/5 : FROM python:3.8-slim
 ---> b5f62925bd0f
Step 2/5 : WORKDIR /app
 ---> 9f59e1108ca8
Step 3/5 : COPY hello_world.py .
 ---> xxxxxxxx
Step 4/5 : RUN chmod +x hello_world.py
 ---> zzzzzzzz
Step 5/5 : CMD ["./hello_world.py"]
 ---> bbbbbbbb
Successfully built bbbbbbbb
Successfully tagged helloworld.app:latest
Verify:
Run:
bash

Collapse

Wrap

Copy
docker images
Should show: helloworld.app latest <image-id>.
Visual Cue: Build steps complete with “Successfully tagged helloworld.app:latest”.

Step 5: Run the App in Docker
Run the Container:
Execute:
bash

Collapse

Wrap

Copy
docker run -it helloworld.app
Output:
text

Collapse

Wrap

Copy
Hello world
The container exits after printing since there’s no interactive input.
Check Container:
See exited containers:
bash

Collapse

Wrap

Copy
docker ps -a
Shows a container with “Exited (0)” status.
Visual Cue: Terminal prints “Hello world” and returns to the prompt.

Step 6: Troubleshoot Common Issues
Exec Format Error:
If you see exec ./hello_world.py: exec format error:
Verify shebang: cat hello_world.py should start with #!/usr/bin/env python3.
Fix line endings:
bash

Collapse

Wrap

Copy
sudo apt install dos2unix -y
dos2unix hello_world.py
Rebuild: docker build -t helloworld.app ..
Or change CMD to CMD ["python3", "hello_world.py"] in Dockerfile, rebuild, and rerun.
File Not Found:
If COPY failed: Ensure you’re in /home/ubuntu/python-docker-app with ls showing both files.
What You’ve Built
EC2 Instance: A t2.micro running Ubuntu 20.04 with Docker installed.
Python App: A simple “Hello world” script (hello_world.py).
Docker Image: helloworld.app, containing the app.
Container: Runs the app and prints “Hello world”.



5. Installing docker client in windows and bridging 2 containers:

- install docker from docker docs website
In cmd:
- docker --version
- docker network create my_custom_bridge
- docker run -dit --name container1 --network my_custom_bridge alpine
- docker run -dit --name container2 --network my_custom_bridge alpine
- docker exec -it container1 sh
- ping container2

Deploying a website using docker and make it public:
- docker pull nginx
- docker run -dit --name webserver --network my_custom_bridge -p 8080:80 nginx
- http://localhost:8080 [in chrome]



6. Tutorial: AWS Application Load Balancer and Classic Load Balancer Setup

Step 1: Launch Multiple EC2 Instances and Install Web Servers
1.1 Sign Into AWS Management Console
Open Browser: Go to aws.amazon.com, click Sign In to the Console (top right).
Log In: Use your AWS credentials.
Select Region: Choose us-east-1 (or your preferred region) from the top-right dropdown.
Visual Cue: Dark blue header with “AWS Management Console” and a region selector.

1.2 Launch EC2 Instances
Search for EC2:
Type EC2 in the search bar, select EC2.
Launch Instances:
Click Launch Instance (orange button).
Name: WebServer1.
AMI: Select Ubuntu Server 20.04 LTS (HVM), click Select.
Instance Type: t2.micro (Free Tier eligible).
Key Pair: Choose Create a new key pair, name it web-key, download web-key.pem.
Network Settings:
Use default VPC and subnet.
Enable Auto-assign Public IP.
Click Edit under “Firewall (security groups)”:
Create new security group: WebSG.
Add rule: Type HTTP, Port 80, Source Anywhere-IPv4 (0.0.0.0/0).
Keep SSH rule (Port 22, 0.0.0.0/0) for access.
User Data (under “Advanced Details”):
bash

Collapse

Wrap

Copy
#!/bin/bash
apt update -y
apt install apache2 -y
systemctl start apache2
systemctl enable apache2
echo "<h1>Web Server 1 - Hello from AWS!</h1>" > /var/www/html/index.html
Number of Instances: Set to 2 (this launches WebServer1 and WebServer2).
Click Launch Instance.
Verify Instances:
Go to Instances, wait for “2/2 checks passed”.
Note public IPs (e.g., 54.123.45.67 for WebServer1, 54.123.45.68 for WebServer2).
Rename the second instance to WebServer2 in the console (select it, click Actions > Edit tags).
Visual Cue: Instances table shows two rows with “Running” status and public IPs.

1.3 Test Web Servers
SSH into Instances:
On your local machine:
bash

Collapse

Wrap

Copy
chmod 400 web-key.pem
ssh -i web-key.pem ubuntu@<public-ip-WebServer1>
Repeat for WebServer2.
Check Apache:
Run:
bash

Collapse

Wrap

Copy
sudo systemctl status apache2
Should show “active (running)”.
Test in Browser:
Open http://<public-ip-WebServer1>: Displays “Web Server 1 - Hello from AWS!”.
Open http://<public-ip-WebServer2>: Same message (we’ll differentiate later).
Visual Cue: Browser shows a simple HTML page; terminal shows Apache status.

Step 2: Set Up Application Load Balancer (ALB)
2.1 Create a Target Group
Navigate to Load Balancing:
In EC2 console, click Target Groups (left sidebar).
Create Target Group:
Click Create target group (orange button).
Target type: Instances.
Name: WebTargetGroup.
Protocol: HTTP, Port: 80.
VPC: Default VPC.
Health checks: Keep defaults (HTTP, /, 200-299).
Click Next.
Register Targets:
Select WebServer1 and WebServer2 from the instance list.
Click Include as pending below.
Click Create target group.
Visual Cue: Target Group page shows WebTargetGroup with two instances pending.

2.2 Create the Application Load Balancer
Go to Load Balancers:
Click Load Balancers (left sidebar).
Create ALB:
Click Create Load Balancer (orange button).
Choose Application Load Balancer, click Create.
Name: WebALB.
Scheme: Internet-facing.
IP address type: IPv4.
Network Mapping: Select default VPC, check at least two Availability Zones (e.g., us-east-1a, us-east-1b), pick public subnets.
Security Group: Select WebSG.
Listeners: Protocol HTTP, Port 80, Forward to WebTargetGroup.
Click Create load balancer.
Get DNS Name:
Select WebALB, go to Description tab, copy the DNS name (e.g., WebALB-123456789.us-east-1.elb.amazonaws.com).
Visual Cue: ALB creation confirmation shows “Successfully created”.

2.3 Verify ALB Traffic Distribution
Check Health:
Go to Target Groups > WebTargetGroup > Targets tab.
Wait for both instances to show “healthy” (1-2 minutes).
Test in Browser:
Open http://<WebALB-DNS> in a browser.
Refresh multiple times: Should see “Web Server 1 - Hello from AWS!” consistently (we’ll tweak content later to confirm balancing).
Differentiate Content:
SSH into WebServer2:
bash

Collapse

Wrap

Copy
echo "<h1>Web Server 2 - Hello from AWS!</h1>" | sudo tee /var/www/html/index.html
Refresh http://<WebALB-DNS> repeatedly: Should alternate between “Web Server 1” and “Web Server 2” (round-robin distribution).
Visual Cue: Browser alternates between server messages on refresh.

Step 3: Set Up Classic Load Balancer (CLB)
3.1 Create the Classic Load Balancer
Go to Load Balancers:
In EC2 console, click Load Balancers.
Create CLB:
Click Create Load Balancer, choose Classic Load Balancer, click Create.
Name: WebCLB.
Scheme: Internet-facing.
Listeners:
Load Balancer Protocol: HTTP, Port: 80.
Instance Protocol: HTTP, Port: 80.
VPC: Default VPC.
Subnets: Select public subnets in at least two AZs.
Security Group: WebSG.
Configure Health Check:
Protocol: HTTP, Port: 80, Path: /.
Keep defaults (e.g., 5 sec interval, 2 healthy threshold).
Add Instances:
Select WebServer1 and WebServer2, click Add to registered.
Tags: Optional, skip for now.
Click Review and Create, then Create.
Get DNS Name:
Select WebCLB, copy DNS name (e.g., WebCLB-987654321.us-east-1.elb.amazonaws.com).
Visual Cue: CLB status changes from “Provisioning” to “Active”.

3.2 Verify CLB Traffic Distribution
Check Health:
Select WebCLB, go to Instances tab.
Wait for both instances to show “InService” (1-2 minutes).
Test in Browser:
Open http://<WebCLB-DNS> in a browser.
Refresh multiple times: Should alternate between “Web Server 1” and “Web Server 2” messages.
Enable Cross-Zone Load Balancing (for even distribution):
Select WebCLB, click Actions > Edit attributes.
Check Cross-zone load balancing, click Save.
Visual Cue: Browser shows alternating server messages, confirming even distribution.

Step 4: Compare and Confirm Even Distribution
ALB Traffic:
Open multiple browser tabs to http://<WebALB-DNS>.
Refresh each tab 10-20 times, note the server hits (e.g., “Web Server 1” vs. “Web Server 2”).
ALB uses a round-robin algorithm by default, so hits should be roughly equal (e.g., 50/50 with two instances).
CLB Traffic:
Repeat with http://<WebCLB-DNS>.
With cross-zone load balancing enabled, CLB also distributes evenly (e.g., 50/50).
Add Logging (Optional):
For ALB: Enable access logs (edit attributes, configure S3 bucket).
For CLB: Enable access logs (edit attributes, configure S3 bucket).
Check logs later to confirm distribution.
Visual Cue: Manual refresh counts show balanced hits; logs (if enabled) list requests per instance.

What You’ve Built
EC2 Instances: Two t2.micro instances (WebServer1, WebServer2) with Apache serving distinct “Hello” pages.
Application Load Balancer: WebALB balancing HTTP traffic across both instances.
Classic Load Balancer: WebCLB doing the same, with cross-zone balancing enabled.
Traffic Distribution: Both ALB and CLB evenly distribute traffic (round-robin).



7. Load balancing:
Create two instances (ubuntu)
open cmd
cd pemfile location
ssh -i pemfie ubuntu@ip
sudo -i
apt update
apt install apache2 -y
sudo systemctl start apache2
sudo systemctl enable apache2
echo "<h1>Your message </h1>" > /var/www/html/index.html
search ip in url
// Do same steps for second instance 
open EC2 -> Load balancer -> create classic load balancer 
copy the dns and put it in url




8. Docker build mount to create volumes using jenkins :

docker -v  
docker volume --help  (display docker volume cmd)  
docker volume create myvolume1  
docker volume ls  
docker volume inspect myvolume1    
docker pull jenkins/jenkins:lts-jdk17  
docker run  --name myjenkins -v myvolume1:/var/jenkins_home -p 8080:8080 -p 50000:50000 jenkins/jenkins:lts  
   
   (run) initial password (copy)  
Local host 8080 put the password
Plugins install select none and skip
Start using jenkins
Create new job
Name it as testjob
Config build shell - ls
Follow the same steps to create another volume 
Give its port number 9090:8080 60000:50000
Local host 9090
Give admin and password
The testjob will be shown in port 9090
Volume is shared through ports
// build mount is used to give our oun address to store the volume

docker run  --name myjenkins -v users/Mirdul s/Desktop/var/jenkins_home -p 8080:8080 -p 50000:50000 jenkins/jenkins:lts  
Folder will be created in desktop